{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2022/denops-vimfunc-to-ts/","result":{"data":{"markdownRemark":{"id":"f523f0f1-d43a-51b6-8a86-443cedb9c9c2","excerpt":"vim プラグインを作ってる時、vimscript で作った匿名関数を typescript に渡して任意のタイミングで typescript から実行したい時があった。 他の変数と同じようにdenops#notify()とかで渡すと、関数はnull…","html":"<p>vim プラグインを作ってる時、vimscript で作った匿名関数を typescript に渡して任意のタイミングで typescript から実行したい時があった。<br>\n他の変数と同じように<code>denops#notify()</code>とかで渡すと、関数は<code>null</code>になってしまう。</p>\n<p>結論から言うと、直接関数を渡す方法はわからなかった。しかし、<code>denops#callback#register()</code>と<code>denops#callback#call()</code>を用いると、id を経由することやりたいことはできた。</p>\n<h2 id=\"例\" style=\"position:relative;\"><a href=\"#%E4%BE%8B\" aria-label=\"例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>例</h2>\n<p>それぞれ、help を引用しておく。</p>\n<details>\n<summary>denops#callback#register()</summary>\n<blockquote>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">denops#callback#register({callback}[, {options}])</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       Register {callback} to internal callback map as an anonymous function</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       and return an unique {id} to call the {callback} later.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       The following attributes are available on {options}.</span></span></code></pre>\n</blockquote>\n</details>\n<details>\n<summary>denops#callback#call()</summary>\n<blockquote>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">denops#callback#call({id}[, {args}...])</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Find a callback of {id} from internal callback map and call it with</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        given {args} and return a result. It throw an error when no {id}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        callback exists.</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        Note that the callback called is automatically removed from the</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        internal callback map if &quot;once&quot; option had specified.</span></span></code></pre>\n</blockquote>\n</details>\n<p>こんな感じで使える。</p>\n<p>typescript 側は次のように id を受け取る。</p>\n<!-- prettier-ignore -->\n<pre class=\"grvsc-container default-dark\" data-language=\"typescript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">main</span><span class=\"mtk1\">(</span><span class=\"mtk12\">denops</span><span class=\"mtk1\">: </span><span class=\"mtk10\">Denops</span><span class=\"mtk1\">): </span><span class=\"mtk10\">void</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">denops</span><span class=\"mtk1\">.</span><span class=\"mtk12\">dispatcher</span><span class=\"mtk1\"> = {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk11\">addFunc</span><span class=\"mtk1\">(</span><span class=\"mtk12\">funcId</span><span class=\"mtk1\">: </span><span class=\"mtk10\">unknown</span><span class=\"mtk1\">): </span><span class=\"mtk10\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk10\">void</span><span class=\"mtk1\">&gt; {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">unknown</span><span class=\"mtk1\">.</span><span class=\"mtk11\">ensureString</span><span class=\"mtk1\">(</span><span class=\"mtk12\">funcId</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">ret</span><span class=\"mtk1\"> = </span><span class=\"mtk15\">await</span><span class=\"mtk1\"> </span><span class=\"mtk12\">denops</span><span class=\"mtk1\">.</span><span class=\"mtk11\">call</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;denops#callback#call&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">id</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;hoge&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk10\">console</span><span class=\"mtk1\">.</span><span class=\"mtk11\">log</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ret</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    },</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>vimscript 側では、id を生成して渡す。</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"vim\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function!</span><span class=\"mtk1\"> </span><span class=\"mtk11\">somePlug#addFunc</span><span class=\"mtk1\">(</span><span class=\"mtk4\">func</span><span class=\"mtk1\">) </span><span class=\"mtk4\">abort</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk4\">let</span><span class=\"mtk1\"> </span><span class=\"mtk4\">l:</span><span class=\"mtk12\">id</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">denops#callback#register</span><span class=\"mtk1\">(</span><span class=\"mtk4\">a:</span><span class=\"mtk12\">func</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk11\">call</span><span class=\"mtk1\"> </span><span class=\"mtk11\">denops#notify</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;somePlug&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&#39;addFunc&#39;</span><span class=\"mtk1\">, [</span><span class=\"mtk4\">l:</span><span class=\"mtk12\">id</span><span class=\"mtk1\">])</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">endfunction</span></span></span></code></pre>\n<p>次のように期待通りの動作をする。</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"txt\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">:call somePlug#addFunc({ arg -&gt; arg . &#39;!!&#39;})</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">[denops] hoge!!</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk15 { color: #C586C0; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk10 { color: #4EC9B0; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"denops.vimでvimscriptの関数をtypescriptに渡したかった","description":null,"postdate":"2022-06-12T21:33:00","update":"2022-06-12T21:33:00","tags":["Vim","Denops"]}},"previous":{"fields":{"slug":"/blog/2022/zsh-plugmanager-zplug-to-sheldon/"},"frontmatter":{"title":"zplugからsheldonに乗り換えた"}},"next":{"fields":{"slug":"/blog/2022/vim-mouse-on-focus/"},"frontmatter":{"title":"Vimにフォーカスを戻した時だけマウスを無効にする"}}},"pageContext":{"id":"f523f0f1-d43a-51b6-8a86-443cedb9c9c2","previousPostId":"8ed53d55-5658-58f1-956a-2e06bb94c751","nextPostId":"d6546d9a-9dc4-5c6a-b46a-bda31e16d928"}},"staticQueryHashes":["661620121","713408048"]}