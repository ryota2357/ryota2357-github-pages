{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2022/lexima-pum-cr/","result":{"data":{"markdownRemark":{"id":"0f76be1e-cdcf-5267-b180-965a2222c104","excerpt":"lexima.vim と pum.vim での<CR>の挙動制御について lexima.vim は内部でマッピング(inoremap)を生成する。そのため pum.vim で補完の確定を<CR>で行っている場合、このマッピングが衝突してしまい意図しない挙動が起きてしまう。 このことについて先日、lexima.vim…","html":"<p>lexima.vim と pum.vim での&#x3C;CR>の挙動制御について</p>\n<p>lexima.vim は内部でマッピング(<code>inoremap</code>)を生成する。そのため pum.vim で補完の確定を&#x3C;CR>で行っている場合、このマッピングが衝突してしまい意図しない挙動が起きてしまう。</p>\n<p>このことについて先日、lexima.vim でオプションを設定することで解決できるようにする PR を作成した。</p>\n<p><a href=\"https://github.com/cohama/lexima.vim/pull/134\">https://github.com/cohama/lexima.vim/pull/134</a></p>\n<p>作者の cohama さんからの返信は「他のプラグインに依存する機能をつけたくない」とのことで、マージはされなかった。各自&#x3C;CR>を lexima.vim にも対応するようにマッピングしてくださいとのこと。</p>\n<h2 id=\"leximavim-対応の-pummapconfirmマッピング\" style=\"position:relative;\"><a href=\"#leximavim-%E5%AF%BE%E5%BF%9C%E3%81%AE-pummapconfirm%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0\" aria-label=\"leximavim 対応の pummapconfirmマッピング permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lexima.vim 対応の pum#map#confirm()マッピング</h2>\n<p>僕のマッピングは次の通り。これをベースに自分にあったマッピングにするといいと思う。<br>\nただし、<code>lexima#expand('&#x3C;CR>')</code> では意図するものにはならないことに注意である。<code>lexima#string#to_mappable('&#x3C;CR>')</code>を通す必要がある。</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"vim\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">execute</span><span class=\"mtk1\"> </span><span class=\"mtk11\">printf</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;inoremap &lt;expr&gt;&lt;silent&gt; &lt;CR&gt; pum#visible() ? pum#map#confirm() : lexima#expand(%s, &#39;i&#39;)&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk6\">\\ </span><span class=\"mtk11\">string</span><span class=\"mtk1\">(</span><span class=\"mtk11\">lexima#string#to_mappable</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&#39;&lt;CR&gt;&#39;</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">              </span><span class=\"mtk6\">\\ </span><span class=\"mtk1\">)</span></span></span></code></pre>\n<h2 id=\"注意点\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\" aria-label=\"注意点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意点</h2>\n<p>前提として lexima.vim は読み込まれた時にデフォルトのルールを設定する。この時に&#x3C;CR>のマッピングが生成されるので上記のマッピングは必ず lexima.vim が読み込まれた後に設定する必要がある。</p>\n<p>lexima.vim には<code>g:lexima_no_default_rules</code>や<code>lexima#clear_rules()</code>、<code>lexima#set_default_rules()</code>と言ったルール定義を制御できる機能がついている。<br>\nこれらを利用して上に示した&#x3C;CR>マッピングが一番最後になるようにすれば良い。</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk6 { color: #D7BA7D; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"lexima.vimとpum.vimと<CR>","description":null,"postdate":"2022-07-09T20:31:00","update":"2022-07-14T08:25:00","tags":["Vim","Neovim"]}},"previous":{"fields":{"slug":"/blog/2022/dev-vim-skim-synctex/"},"frontmatter":{"title":"neovim(vim)とskimでsynctexできるようにするプラグイン作った"}},"next":null},"pageContext":{"id":"0f76be1e-cdcf-5267-b180-965a2222c104","previousPostId":"a972d7bc-2844-5d29-a672-0c2e23007cbe","nextPostId":null}},"staticQueryHashes":["661620121","713408048"]}